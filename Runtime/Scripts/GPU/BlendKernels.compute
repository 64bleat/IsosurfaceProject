#pragma kernel BlendUnion
#pragma kernel BlendSubtraction
#pragma kernel BlendSmooth
#pragma kernel BlendSmoothUnion
#pragma kernel BlendIntersection
#pragma kernel BlendRepel
#pragma kernel BlendLerp 

#include "Noise.cginc"
#include "Transform.cginc"
#include "TetraGenInclude.cginc"

float4 smooth(float4 d1, float4 d2, float k)
{
	float t = step(d2.w, d1.w);
	float h = max(k - abs(-d2.w + d1.w), 0) / k;

	return lerp(d1, d2, t) - pow(h, 3) * k / 6;
}

float smoothUnion(float d1, float d2, float k)
{
	if(k <= 0)
		return min(d1, d2);

	float h = clamp(0.5f + 0.5f * (d2 - d1) / k, 0.0, 1.0);
	return lerp(d2, d1, h) - k * h * (1.0 - h);
}

[numthreads(1,1,1)]
void BlendUnion(uint3 id : SV_DispatchThreadID)
{
	float4 ndA = sdf_NormalDistance[id];
	float4 ndB = sdf_NormalDistance_Blend[id];
	float t = step(ndB.w, ndA.w);

	sdf_NormalDistance[id] = lerp(ndA, ndB, t);
}

[numthreads(1,1,1)]
void BlendSubtraction(uint3 id : SV_DispatchThreadID)
{
	float4 ndA = sdf_NormalDistance[id];
	float4 ndB = sdf_NormalDistance_Blend[id];
	float t = step(ndA.w, -ndB.w);

	sdf_NormalDistance[id] = lerp(ndA, -ndB, t);
}

[numthreads(1,1,1)]
void BlendSmooth(uint3 id : SV_DispatchThreadID)
{
	float4 ndA = sdf_NormalDistance[id];
	float4 ndB = sdf_NormalDistance_Blend[id];
	float t = shapeBuffer[0].blendFactor;

	sdf_NormalDistance[id] = smooth(ndA, ndB, t);
}

[numthreads(1,1,1)]
void BlendSmoothUnion(uint3 id : SV_DispatchThreadID)
{
	float4 ndA = sdf_NormalDistance[id];
	float4 ndB = sdf_NormalDistance_Blend[id];
	float t = shapeBuffer[0].blendFactor;

	sdf_NormalDistance[id] = float4(1,1,1,smoothUnion(ndA.w, ndB.w, t));
}

[numthreads(1,1,1)]
void BlendIntersection(uint3 id : SV_DispatchThreadID)
{
	float4 ndA = sdf_NormalDistance[id];
	float4 ndB = sdf_NormalDistance_Blend[id];
	float t = step(ndA.w, ndB.w);

	sdf_NormalDistance[id] = lerp(ndA, ndB, t);
}

[numthreads(1,1,1)]
void BlendRepel(uint3 id : SV_DispatchThreadID)
{
	float4 ndA = sdf_NormalDistance[id];
	float4 ndB = sdf_NormalDistance_Blend[id];
	float t =  shapeBuffer[0].blendFactor;

	sdf_NormalDistance[id] =  float4(1,1,1, 2 * min(ndA.w, ndB.w) - smoothUnion(ndA.w, ndB.w, t));
}

[numthreads(1,1,1)]
void BlendLerp(uint3 id : SV_DispatchThreadID)
{
	float4 ndA = sdf_NormalDistance[id];
	float4 ndB = sdf_NormalDistance_Blend[id];
	float t = shapeBuffer[0].blendFactor;
	
	sdf_NormalDistance[id] = lerp(ndA, ndB, t);
}