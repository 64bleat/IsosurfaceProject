#pragma kernel AddBox
#pragma kernel AddSphere
#pragma kernel AddPlane

#include "Noise.cginc"
#include "Transform.cginc"
#include "TetraGenInclude.cginc"

[numthreads(1,1,1)]
void AddSphere(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x * yBound * zBound + id.y * zBound + id.z;
	float3 worldLattice = transformPoint(weightBuffer[index].position, chunk2World);
	float3 masterLattice = transformPoint(worldLattice, shapeBuffer[0].world2Shape);
	float3 localClosest = normalize(masterLattice) * 0.5;
	float3 worldClosest = transformPoint(localClosest, shapeBuffer[0].shape2World);
	float3 worldCenter = transformPoint(float3(0,0,0), shapeBuffer[0].shape2World);  

	blendBuffer[index].distance = distance(worldLattice, worldCenter) - distance(worldClosest, worldCenter);
}

[numthreads(1,1,1)]
void AddBox(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x * yBound * zBound + id.y * zBound + id.z;
	float3 worldLattice = transformPoint(weightBuffer[index].position, chunk2World);
	float3 masterLattice = transformPoint(worldLattice, shapeBuffer[0].world2Shape);
	float3 absLocalLattice = min(abs(masterLattice), float3(0.5,0.5,0.5));
	float3 threshold = float3(1,1,1) * max(max(absLocalLattice.x, absLocalLattice.y), absLocalLattice.z);
	float3 localClosest = lerp(masterLattice, sign(masterLattice) * 0.5, step(threshold, absLocalLattice));
	float3 worldClosest = transformPoint(localClosest, shapeBuffer[0].shape2World);
	float direction = sign(step(0.5, threshold.x) - 0.5);

	blendBuffer[index].distance = distance(worldClosest, worldLattice) * direction;

}

[numthreads(1,1,1)]
void AddPlane(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x * yBound * zBound + id.y * zBound + id.z;	
	float3 worldLattice = transformPoint(weightBuffer[index].position, chunk2World);
	float3 localLattice = transformPoint(worldLattice, shapeBuffer[0].world2Shape);
	float3 localClosest = localLattice * float3(1,0,1);
	float dist = localLattice.y;

	dist -= length(pow(noise3d3d(localLattice / 50), 4) * float3(.5, 20 + localLattice.x / 10, .5));  
	dist -= length(pow(noise3d3d(localLattice / 10), 2) * float3(.5, 5, .5 + localLattice.z / 10));  
	dist -= length(noise3d3d(localLattice / 3) * 2);  

	blendBuffer[index].distance = dist;
}